---
import Layout from "../../layouts/Layout.astro";
import { supabase } from '../../lib/supabase';

const postId = Astro.url.pathname.split('/').pop();
const { data: post } = await supabase
    .from('posts')
    .select('*')
    .eq('id', postId)
    .single();
const { data: comments } = await supabase
    .from('comments')
    .select('*')
    .eq('post_id', postId);

const { data: user } = await supabase
    .from('profiles')
    .select('*')
    .eq('user_id', post.user_id)
    .single();

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");
if (!accessToken || !refreshToken) {
  return Astro.redirect("/login?redirectTo=" + Astro.url.pathname);
}
const { error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});
if (error) {
  Astro.cookies.delete("sb-access-token", {
    path: "/",
  });
  Astro.cookies.delete("sb-refresh-token", {
    path: "/",
  });
  return Astro.redirect("/login?redirectTo=" + Astro.url.pathname);
}

//@ts-ignore
// Fetch usernames for each comment
const commentsWithUsernames = await Promise.all(comments.map(async (comment) => {
  const { data: commentUser } = await supabase
      .from('profiles')
      .select('username')
      .eq('user_id', comment.user_id)
      .single();
  return { ...comment, username: commentUser?.username };
}));
---

<Layout title={post.title} description="게시물">
  <h1 class="text-3xl font-bold mb-4">{post.title}</h1>
  <p class="text-sm text-gray-500 mb-4">작성자: {user?.username || 'Unknown'}</p>
  {post.image_url && <img src={post.image_url} alt={post.title} class="mb-6 max-w-full h-auto" style="max-width: 600px;" />}
  <p class="mb-6">{post.content}</p>
  <div class="flex space-x-4 mb-6">
    <span>👍 {post.like_count}</span>
    <span>👎 {post.dislike_count}</span>
    <button id="likeButton" class="px-2 py-1 bg-green-500 text-white rounded">Like</button>
    <button id="dislikeButton" class="px-2 py-1 bg-red-500 text-white rounded">Dislike</button>
  </div>
  <h2 class="text-2xl font-semibold mb-4">Comments</h2>
  <ul class="space-y-4 mb-6">
    {commentsWithUsernames && commentsWithUsernames.map(comment => (
        <li class="p-4 bg-gray-100 rounded-lg text-black">
          <p class="text-sm text-gray-500 mb-2">작성자: {comment?.username || 'Unknown'}</p>
          {comment.content}
        </li>
    ))}
  </ul>
  <form action="/api/post/new-comment" method="post" class="space-y-4">
    <input type="hidden" name="post_id" value={postId} />
    <label>
      <textarea name="content" placeholder="Add a comment" required class="w-full p-2 border border-gray-300 rounded-lg text-black"></textarea>
    </label>
    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Comment</button>
  </form>
</Layout>

<script is:inline>
  const postId = window.location.pathname.split('/').pop();

  document.getElementById('likeButton').addEventListener('click', async () => {
    await fetch('/api/post/like-dislike', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ postId: postId, action: 'like' }),
    });
    location.reload();
  });

  document.getElementById('dislikeButton').addEventListener('click', async () => {
    await fetch('/api/post/like-dislike', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ postId: postId, action: 'dislike' }),
    });
    location.reload();
  });
</script>
